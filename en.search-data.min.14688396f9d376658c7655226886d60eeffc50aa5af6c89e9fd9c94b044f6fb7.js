'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/library/',title:"Coding Library",section:"Docs",content:"Language specific resources #  This folder contains everything coding language related. Since I currently use Python and Swift, the resources found on this page will be mainly on these topics. Besides that, there will be some things about shell scripting, markdown and git around here.\n  Swift  The main programming language for all Apple devices. Although it\u0026rsquo;s also supported on Linux and Windows. It\u0026rsquo;s the predecessor to Objective-C and a highly modern language, with easy to read syntax.\n    Python  This is where it all started for me. Python was my first contact with coding. But since Python is quite restricted or difficult to deal with, when it comes to UI applications, I started to look somewhere else. But Python is still a tool in my belt and I plan to extend my knowledge on the language.\n   "}),a.add({id:1,href:'/docs/tutorials/setup_website/',title:"Host a GitHub Page with Hugo",section:"Tutorials",content:"Host a GitHub Page with Hugo #  This is a brief tutorial on how to set up a GitHub page with Hugo as a static content generator. It\u0026rsquo;s a simple and easy solution to maintain a personal website and blog. Especially if your a coder and used to working with git and the command line.\nPrerequisites The following topics are mandatory and won\u0026rsquo;t be covered in this tutorial:\n A working installation of Hugo Basic git knowledge A GitHub account Markdown syntax     1 Hugo #  Hugo is one of the key components for this project. Hugo is a open-source static site generator. Once installed it can be used inside the command line to build static websites from markdown files. The tool comes with a powerful theme engine and is customizable using templates. Hugo builds the mandatory file system during project creation and is later configured using a config.toml file. Hugo lets you create your content as pure markdown files, extend them with a file header and publish them directly to your website, only from the command line. In combination with the right theme this is all you need, if you know your way around git and the terminal, to run your website. I find it a lot easier to deal with, then with wordpress and co.\nHugo has a lot more to offer, than this tutorial covers. For further reading, check the projects homepage.\n2 Project creation #  Before we can start configuring, styling and filling our page with content, we need to build a new Hugo project and set up the connection with github pages.\n2.1 Github setup #  A project like this consists of two github repositories. One so called production repo, which contains the static files, github pages will then host our site of, and one repository, I will call the blog repo from now on, cause mine is named this way. If you\u0026rsquo;re building a portfolio or some other kind of page feel free to use another name. The second repository will contain the actual code and configuration for the site. The blog repo will later be linked by a submodule to the production repo, to push changes to the site directly to the live version. Go ahead an create two public repositories with no initial content:\n create code repo and name it as you like create production repo and name it \u0026lt;username\u0026gt;.github.io  Since we are using a personal github page for our project, the name of the production repo has to be \u0026lt;github_username\u0026gt;.github.io. Each account is limited to a single personal page, but each repo to a project can have its own site (the setup process is a little bit different).\nCreate a project folder for your local files. I put mine directly into my home directory, since I will have to access it a lot in the future and named it webpage.\n~ $ mkdir webpage ~ $ cd webpage This folder will contain the local versions of both repositories and will act as the root directory of the project. Here you can create folders for other files, that are project related, but not part or content of the actual site. Im keeping the photoshop files for feature image templates here for instance. Data outside the two cloned repository folders, is not part of any git repository. Let\u0026rsquo;s continue by actually cloning the two repos:\n~/webpage $ git clone https://github.com/\u0026lt;username\u0026gt;/blog.git ~/webpage $ git clone https://github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git After cloning the repos we will checkout the main branch, add README.md and .gitignore to both of them and push the changes to origin.\n~/webpage $ cd blog # Create main branch an switch to it ~//blog $ git checkout -b main # Create files ~//blog $ touch README.md ~//blog $ touch .gitignore # Stage and commit changes ~//blog $ git add . ~//blog $ git commit -m \u0026#39;initial commit\u0026#39; # Push changes to origin/main ~//blog $ git push origin main Repeat these steps for the production repo and you\u0026rsquo;re good to go for the next step.\n2.2 Create Hugo project #  Let\u0026rsquo;s start building our Hugo project, by changing to the blog folder and create a new Hugo project there:\n~/webpage $ cd blog # Hugo command to build a new project hugo new site \u0026lt;website-name\u0026gt; The hugo new site command did all the heavy lifting for us, by creating a lot of boiler plate code, and the mandatory file structure, in order for hugo to work properly. The project structure should look something like this right now:\n. └── /webpage └── /blog (git repository) | ├── /project | | ├── /content | | └── lots of other Hugo files ... | └── .git_files ├── /production (git repository) \u0026lt;-- named \u0026lt;username\u0026gt;.github.io | └── .git_files └── /resources The names for these folders will be used consistently in this tutorial from now on, since they are the naming conventions my live version follows.\n2.3 Establish repository connection #  The final setup step is to connect the blog repository to the production repo. In order to do so, we have to create a submodule of production inside blog and store it inside a folder called public.\n~/webpage $ cd blog # Switch to the directory of the hugo project ~//blog $ cd project # Create submodule from main branch of repo and clone it to the public folder ~///project $ git submodule add -b main \u0026lt;username\u0026gt;.github.io public Since Hugo will later save the generated static files into the public folder, we now have created a direct link to our live version of the page. Whenever we add or change files in our blog repo and update the page with Hugo, we only have to push the changes, made to webpage/blog/project/public, to origin, to update the live web-site. We can now continue by establishing our local file system and setting up Hugo.\n3 Configure Hugo #  We now have everything set up correctly and can start building the actual page and filling it with content.\n3.1 Choosing a theme #  Choosing a theme is a key part of the creation process. I wanted a site, where I can easily manage my content and sort it by categories. My goal is to build a resource page for myself, where I can look up things I already learned. By creating these posts I will settle my new knowledge. I found that uBlogger fits the needs I have the most, but there are tons of other themes on the Hugo Themes page. If you want to follow along, go with uBlogger, otherwise choose a different theme, but the configuration and content management principles may vary from theme to theme.\nFor most themes navigate to the themes github repo and copy its link to clone it into your project. It seems to be best practice to submodule the theme rather than simply cloning it. Some themes may have different installing instructions specified in their documentation.\n~//blog $ cd project ~//blog $ git submodule add https://github.com/upagge/uBlogger.git themes/uBlogger This creates a submodule of the desired theme inside our blog repo. If the theme is later updated, we can simply pull changes from the original repository of the theme. In order to apply the theme to the page, change its name and further personalize it, we need to dive into the configuration process.\n3.2 Configuration #  The configuration process is a big part of the page setup and personalization process. I will add further details about the different parts of the config, as I tweak this page. For now a complete example with comments should do it.\nExample configuration # ----------------------- # PAGE CONFIGURATION FILE # ----------------------- # # -------------------- # Global configuration # -------------------- # # website title title = \u0026#34;a coding monkey\u0026#34; # site description description = \u0026#34;A personal blog about coding and learning to do so.\u0026#34; # site keywords keywords = [\u0026#34;personal\u0026#34;, \u0026#34;blog\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;swift\u0026#34;, \u0026#34;python\u0026#34;, \u0026#34;abl3t0nnile\u0026#34;] # [en, zh-cn, fr, pl, ...] determines default content language defaultContentLanguage = \u0026#34;en\u0026#34; # Base URL of the final site baseURL = \u0026#34;http://abl3t0nnile.github.io\u0026#34; # theme theme = \u0026#34;uBlogger\u0026#34; # whether to use robots.txt enableRobotsTXT = true # whether to use git commit log # This helps to update the last modified data on posts based on the commit history enableGitInfo = true # Sets how many posts are shown on a single page paginate = 10 # # Author config # This pulls informatio abou the aouther from data/authors/filename [author] name = \u0026#34;codemonkey\u0026#34; # Menu config [menu] [[menu.main]] identifier = \u0026#34;posts\u0026#34; # you can add extra information before the name  # (HTML format is supported), such as icons pre = \u0026#34;\u0026#34; # you can add extra information after the name  # (HTML format is supported), such as icons post = \u0026#34;\u0026#34; name = \u0026#34;Posts\u0026#34; url = \u0026#34;/posts/\u0026#34; # title will be shown when you hover on this menu link. title = \u0026#34;\u0026#34; weight = 1 [[menu.main]] identifier = \u0026#34;tags\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Tags\u0026#34; url = \u0026#34;/tags/\u0026#34; title = \u0026#34;\u0026#34; weight = 2 [[menu.main]] identifier = \u0026#34;categories\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Categories\u0026#34; url = \u0026#34;/categories/\u0026#34; title = \u0026#34;\u0026#34; weight = 3 [[menu.main]] identifier = \u0026#34;about\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;About\u0026#34; url = \u0026#34;/about/\u0026#34; title = \u0026#34;\u0026#34; weight = 4 # Taxonomies [taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; # Markup related configuration in Hugo [markup] # Syntax Highlighting  # (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] codeFences = true guessSyntax = true lineNos = true lineNumbersInTable = true noClasses = false # Goldmark is from Hugo 0.60 the default library used for Markdown [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.renderer] # whether to use HTML tags directly in the document unsafe = true # Table Of Contents settings [markup.tableOfContents] startLevel = 2 endLevel = 6 # Sitemap config [sitemap] changefreq = \u0026#34;weekly\u0026#34; filename = \u0026#34;sitemap.xml\u0026#34; priority = 0.5 # Permalinks config  # (https://gohugo.io/content-management/urls/#permalinks) [Permalinks] # posts = \u0026#34;:year/:month/:filename\u0026#34; posts = \u0026#34;:filename\u0026#34; # Options to make output .md files [mediaTypes] [mediaTypes.\u0026#34;text/plain\u0026#34;] suffixes = [\u0026#34;md\u0026#34;] # Options to make output .md files [outputFormats.MarkDown] mediaType = \u0026#34;text/plain\u0026#34; isPlainText = true isHTML = false # Options to make hugo output files [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] page = [\u0026#34;HTML\u0026#34;, \u0026#34;MarkDown\u0026#34;] section = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;] taxonomy = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;] taxonomyTerm = [\u0026#34;HTML\u0026#34;] # # ---------------------------- # Theme specific configuration # ---------------------------- # [params] # uBlogger theme version version = \u0026#34;2.0.X\u0026#34; # site default theme (\u0026#34;light\u0026#34;, \u0026#34;dark\u0026#34;, \u0026#34;auto\u0026#34;) defaultTheme = \u0026#34;auto\u0026#34; # public git repo url only then enableGitInfo is true gitRepo = \u0026#34;https://github.com/abl3t0nnile/blog\u0026#34; # date format dateFormat = \u0026#34;2006-01-02\u0026#34; # Header config [params.header] # desktop header mode (\u0026#34;fixed\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;) desktopMode = \u0026#34;fixed\u0026#34; # mobile header mode (\u0026#34;fixed\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;) mobileMode = \u0026#34;auto\u0026#34; # Header title config [params.header.title] # URL of the LOGO logo = \u0026#34;\u0026#34; # title name name = \u0026#34;a Coding Monkey\u0026#34; # you can add extra information before the name  # (HTML format is supported), such as icons pre = \u0026#34;\u0026#34; # you can add extra information after the name  # (HTML format is supported), such as icons post = \u0026#34;\u0026#34; # Footer config [params.footer] enable = true # Custom content (HTML format is supported) custom = \u0026#39;\u0026#39; # whether to show Hugo and theme info hugo = true # whether to show copyright info copyright = true # whether to show the author author = true # site creation time since = 2021 # license info (HTML format is supported) license= \u0026#39;\u0026lt;a rel=\u0026#34;license external nofollow noopener noreffer\u0026#34; href=\u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;CC BY-NC 4.0\u0026lt;/a\u0026gt;\u0026#39; # Home page config [params.home] # amount of RSS pages rss = 10 # Home page profile [params.home.profile] enable = true # Gravatar Email for preferred avatar in home page gravatarEmail = \u0026#34;\u0026#34; # URL of avatar shown in home page avatarURL = \u0026#34;/img/avatar.png\u0026#34; # title shown in home page (HTML format is supported) title = \u0026#34;a Coding Monkey\u0026#34; # subtitle shown in home page (HTML format is supported) subtitle = \u0026#34;A personal blog about coding and learning to do so.\u0026#34; # whether to show social links social = true # disclaimer (HTML format is supported) disclaimer = \u0026#34;Written by a monkey in front of a computer ...\u0026#34; # Home page posts [params.home.posts] enable = true # special amount of posts in each home posts page paginate = 4 # Social config in home page [params.social] GitHub = \u0026#34;Abl3t0nnile\u0026#34; Email = \u0026#34;minnemann.g@gmail.com\u0026#34; RSS = false # Section (all posts) page config [params.section] # special amount of posts in each section page paginate = 20 # date format (month and day) dateFormat = \u0026#34;01-02\u0026#34; # amount of RSS pages rss = 10 # List (category or tag) page config [params.list] # special amount of posts in each list page paginate = 20 # date format (month and day) dateFormat = \u0026#34;01-02\u0026#34; # amount of RSS pages rss = 10 # Comment config [params.comment] enable = false # Page config [params.page] theme = \u0026#34;full\u0026#34; # whether to hide a page from home page hiddenFromHomePage = false # whether to hide a page from search results hiddenFromSearch = false # whether to enable twemoji twemoji = false # whether to enable the ruby extended syntax ruby = true # whether to enable the fraction extended syntax fraction = true # whether to enable the fontawesome extended syntax fontawesome = true # whether to show link to Raw Markdown content of the content linkToMarkdown = true # whether to show the full text content in RSS rssFullText = false # Table of the contents config [params.page.toc] # whether to enable the table of the contents enable = true # whether to keep the static table of the contents in front of the post keepStatic = false # whether to make the table of the contents in the sidebar # automatically collapsed auto = true # Code config [params.page.code] # whether to show the copy button of the code block copy = true # the maximum number of lines of displayed code by default maxShownLines = 10 # Social share links in post page [params.page.share] enable = false #Search config [params.search] enable = true # type of search engine (\u0026#34;lunr\u0026#34;, \u0026#34;algolia\u0026#34;) type = \u0026#34;lunr\u0026#34; # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \u0026#34;\u0026#34; # uBlogger NEW | 0.2.1 max number of results length maxResultLength = 10 # uBlogger NEW | 0.2.3 snippet length of the result snippetLength = 30 # uBlogger NEW | 0.2.1 HTML tag name of the highlight part in results highlightTag = \u0026#34;em\u0026#34; # uBlogger NEW | 0.2.4 whether to use the absolute URL based on the # baseURL in search index absoluteURL = false    We can now take a first look on our new page. To test a page in Hugo, simply type hugo server into the command line, while in the project directory. Hugo now creates the website and runs it on a local host. The address will be shown in the command line. As long as you keep the server running, hugo will update the site on every change we make to the code. Now we can finally start with personalizing our page.\nAlthough it\u0026rsquo;s empty our page is now complete. All we have to do, is create some content and push the changes to our production repo.\n 4 Content management #  To be continued \u0026hellip;\n5 Publication #  To be continued \u0026hellip;\n6 Automation #  To be continued \u0026hellip;\n"}),a.add({id:2,href:'/docs/library/markdown/syntax_guide/',title:"Markdown Syntax Guide",section:"Markdown",content:"Markdown Syntax Guide #  This article offers a sample of basic Markdown syntax that can be used in Hugo content files.\nThis article is a shameful copy of the great Grav original page.\nFurther details on the extended Markdown syntax of Hugo and Books - Theme see the corresponding articles.\n Let\u0026rsquo;s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\n Markdown is simple to learn, with minimal extra characters, so it\u0026rsquo;s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use!  John Gruber, the author of Markdown, puts it like this:\n The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email.\n\u0026ndash; John Gruber\n Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like!\n1 Headings #  Headings from h2 through h6 are constructed with a # for each level:\n## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this:\n\u0026lt;h2\u0026gt;h2 Heading\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;h3 Heading\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;h4 Heading\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;h5 Heading\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;h6 Heading\u0026lt;/h6\u0026gt; 2 Comments #  Comments should be HTML compatible.\n\u0026lt;!-- This is a comment --\u0026gt; Comment below should NOT be seen:\n3 Horizontal Rules #  The HTML \u0026lt;hr\u0026gt; element is for creating a \u0026ldquo;thematic break\u0026rdquo; between paragraph-level elements. In Markdown, you can create a \u0026lt;hr\u0026gt; with any of the following:\n ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks  The rendered output looks like this:\n   4 Body Copy #  Body copy written as normal, plain text will be wrapped with \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; tags in the rendered HTML.\nSo this body copy:\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this:\n\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u0026lt;/p\u0026gt; A line break can be done with one blank line.\n5 Inline HTML #  If you need a certain HTML tag (with a class) you can simply use HTML:\nParagraph in Markdown. \u0026lt;div class=\u0026#34;class\u0026#34;\u0026gt; This is \u0026lt;b\u0026gt;HTML\u0026lt;/b\u0026gt; \u0026lt;/div\u0026gt; Paragraph in Markdown. 6 Emphasis #  Bold #  For emphasizing a snippet of text with a heavier font-weight.\nThe following snippet of text is rendered as bold text.\n**rendered as bold text** __rendered as bold text__ The HTML looks like this:\n\u0026lt;strong\u0026gt;rendered as bold text\u0026lt;/strong\u0026gt; Italics #  For emphasizing a snippet of text with italics.\nThe following snippet of text is rendered as italicized text.\n*rendered as italicized text* _rendered as italicized text_ The HTML looks like this:\n\u0026lt;em\u0026gt;rendered as italicized text\u0026lt;/em\u0026gt; Strikethrough #  In [GFM]^(GitHub flavored Markdown) you can do strikethroughs.\n~~Strike through this text.~~ The rendered output looks like this:\nStrike through this text.\nThe HTML looks like this:\n\u0026lt;del\u0026gt;Strike through this text.\u0026lt;/del\u0026gt; Combination #  Bold, italics, and strikethrough can be used in combination.\n***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this:\nbold and italics\nstrikethrough and bold\nstrikethrough and italics\nbold, italics and strikethrough\nThe HTML looks like this:\n\u0026lt;em\u0026gt;\u0026lt;strong\u0026gt;bold and italics\u0026lt;/strong\u0026gt;\u0026lt;/em\u0026gt; \u0026lt;del\u0026gt;\u0026lt;strong\u0026gt;strikethrough and bold\u0026lt;/strong\u0026gt;\u0026lt;/del\u0026gt; \u0026lt;del\u0026gt;\u0026lt;em\u0026gt;strikethrough and italics\u0026lt;/em\u0026gt;\u0026lt;/del\u0026gt; \u0026lt;del\u0026gt;\u0026lt;em\u0026gt;\u0026lt;strong\u0026gt;bold, italics and strikethrough\u0026lt;/strong\u0026gt;\u0026lt;/em\u0026gt;\u0026lt;/del\u0026gt; 7 Blockquotes #  For quoting blocks of content from another source within your document.\nAdd \u0026gt; before any text you want to quote:\n\u0026gt; **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this:\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n The HTML looks like this:\n\u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt; \u0026lt;strong\u0026gt;Fusion Drive\u0026lt;/strong\u0026gt; combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt; Blockquotes can also be nested:\n\u0026gt; Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u0026gt;\u0026gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this:\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n  8 Lists #  Unordered #  A list of items in which the order of the items does not explicitly matter.\nYou may use any of the following symbols to denote bullets for each list item:\n* valid bullet - valid bullet + valid bullet For example:\n* Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit  Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at   Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  The HTML looks like this:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Phasellus iaculis neque\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Purus sodales ultricies\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Vestibulum laoreet porttitor sem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ac tristique libero volutpat at\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; Ordered #  A list of items in which the order of items does explicitly matter.\n1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  The HTML looks like this:\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; If you just use 1. for each number, Markdown will automatically number each item. For example:\n1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem   Task Lists #  Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]).\n- [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this:\n Write the press release Update the website Contact the media  9 Code #  Inline Code #  Wrap inline snippets of code with `.\nIn this example, `\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;` should be wrapped as **code**. The rendered output looks like this:\nIn this example, \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; should be wrapped as code.\nThe HTML looks like this:\n\u0026lt;p\u0026gt; In this example, \u0026lt;code\u0026gt;\u0026amp;lt;section\u0026amp;gt;\u0026amp;lt;/section\u0026amp;gt;\u0026lt;/code\u0026gt; should be wrapped with \u0026lt;strong\u0026gt;code\u0026lt;/strong\u0026gt;. \u0026lt;/p\u0026gt; Indented Code #  Or indent several lines of code by at least four spaces, as in:\n// Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this:\n// Some comments line 1 of code line 2 of code line 3 of code  The HTML looks like this:\n\u0026lt;pre\u0026gt; \u0026lt;code\u0026gt; // Some comments line 1 of code line 2 of code line 3 of code \u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt; Block Fenced Code #  Use \u0026ldquo;fences\u0026rdquo; ``` to block in multiple lines of code with a language attribute.\n```markdown Sample text here... ``` The HTML looks like this:\n\u0026lt;pre language-html\u0026gt; \u0026lt;code\u0026gt;Sample text here...\u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt; Syntax Highlighting #  [GFM]^(GitHub Flavored Markdown) also supports syntax highlighting.\nTo activate it, simply add the file extension of the language you want to use directly after the first code \u0026ldquo;fence\u0026rdquo;, ```js, and syntax highlighting will automatically be applied in the rendered HTML.\nFor example, to apply syntax highlighting to JavaScript code:\n```js grunt.initConfig({ assemble: { options: { assets: \u0026#39;docs/assets\u0026#39;, data: \u0026#39;src/data/*.{json,yml}\u0026#39;, helpers: \u0026#39;src/custom-helpers.js\u0026#39;, partials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;] }, pages: { options: { layout: \u0026#39;default.hbs\u0026#39; }, files: { \u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;] } } } }; ``` The rendered output looks like this:\ngrunt.initConfig({ assemble: { options: { assets: \u0026#39;docs/assets\u0026#39;, data: \u0026#39;src/data/*.{json,yml}\u0026#39;, helpers: \u0026#39;src/custom-helpers.js\u0026#39;, partials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;] }, pages: { options: { layout: \u0026#39;default.hbs\u0026#39; }, files: { \u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;] } } } }; Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode.  10 Tables #  Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n| Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    The HTML looks like this:\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Option\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Description\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;data\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;path to data files to supply the data that will be passed into templates.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;engine\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;engine to be used for processing templates. Handlebars is the default.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;ext\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;extension to be used for dest files.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026#39;\u0026#39; Adding a colon on the right side of the dashes below any heading will right align text for that column.\nAdding colons on both sides of the dashes below any heading will center align text for that column.\n| Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.     11 Links Basic Link \u0026lt;https://assemble.io\u0026gt; \u0026lt;contact@revolunet.com\u0026gt; [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip):\nhttps://assemble.io\ncontact@revolunet.com\nAssemble\nThe HTML looks like this:\n\u0026lt;a href=\u0026#34;https://assemble.io\u0026#34;\u0026gt;https://assemble.io\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;mailto:contact@revolunet.com\u0026#34;\u0026gt;contact@revolunet.com\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;https://assemble.io\u0026#34;\u0026gt;Assemble\u0026lt;/a\u0026gt; Add a Title [Upstage](https://github.com/upstage/ \u0026#34;Visit Upstage!\u0026#34;) The rendered output looks like this (hover over the link, there should be a tooltip):\nUpstage\nThe HTML looks like this:\n\u0026lt;a href=\u0026#34;https://github.com/upstage/\u0026#34; title=\u0026#34;Visit Upstage!\u0026#34;\u0026gt;Upstage\u0026lt;/a\u0026gt; Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n## Table of Contents  * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections:\n## Chapter 1 \u0026lt;a id=\u0026#34;chapter-1\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. ## Chapter 2 \u0026lt;a id=\u0026quot;chapter-2\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one.\n## Chapter 3 \u0026lt;a id=\u0026quot;chapter-3\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\n 12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page.\nTo create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially.\nAdd the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables.\nThis is a digital footnote[^1]. This is a footnote with \u0026#34;label\u0026#34;[^label] This is a footnote with \u0026ldquo;label\u0026rdquo;2\n13 Images Images will be embeded using Hugo extended Syntax, because it\u0026rsquo;s much easier to style them this way.\n  This is a digital footnote \u0026#x21a9;\u0026#xfe0e;\n This is a footnote with \u0026ldquo;label\u0026rdquo; \u0026#x21a9;\u0026#xfe0e;\n       "}),a.add({id:3,href:'/docs/tutorials/shell_auto_blog/',title:"Automate GitHub Hosting with Shell Scripts",section:"Tutorials",content:"Introduction #  This article will show how to simplify a lot of typing in the command line, when maintaining a GitHub page. It explores basic shell scripting, to automate post creation, staging and commit repository changes and pushing the updated site to the production repo of the project.\n"}),a.add({id:4,href:'/docs/tutorials/',title:"Tutorials",section:"Docs",content:"Tutorials and Guides #  Some things have to be done a specific way. This part of the page is home to all step-by-step guides and tutorials. It\u0026rsquo;s easier to write it down first time, then looking it up again later.\n  Essentials #    Setup a site like the one you see\n "}),a.add({id:5,href:'/docs/library/swift/',title:"Swift",section:"Coding Library",content:"  Swift\n   Wikipedia says:\nSwift is a general-purpose, multi-paradigm, compiled programming language developed by Apple Inc. and the open-source community, first released in 2014. Swift was developed as a replacement for Apple\u0026rsquo;s earlier programming language Objective-C, as Objective-C had been largely unchanged since the early 1980s and lacked modern language features. Swift works with Apple\u0026rsquo;s Cocoa and Cocoa Touch frameworks, and a key aspect of Swift\u0026rsquo;s design was the ability to interoperate with the huge body of existing Objective-C code developed for Apple products over the previous decades. It is built with the open source LLVM compiler framework and has been included in Xcode since version 6, released in 2014. On Apple platforms, it uses the Objective-C runtime library which allows C, Objective-C, C++ and Swift code to run within one program.\nSwift was introduced at Apple\u0026rsquo;s 2014 Worldwide Developers Conference (WWDC). It underwent an upgrade to version 1.2 during 2014 and a major upgrade to Swift 2 at WWDC 2015. Initially a proprietary language, version 2.2 was made open-source software under the Apache License 2.0 on December 3, 2015, for Apple\u0026rsquo;s platforms and Linux.\nSwift 5.1 was officially released in September 2019. Swift 5.1 builds on the previous version of Swift 5 by extending the stable features of the language to compile-time with the introduction of module stability. The introduction of module stability makes it possible to create and share binary frameworks that will work with future releases of Swift.\n Important external resources #   Swift.org is home to the Swift community. It contains tutorials, guides and the complete documentation to the Swift language.\nThe Apple Developer Programm is another pretty useful page for aspiring Swift developers. It has even more tutorials and guides an app development for the Apple cosmos.\n"}),a.add({id:6,href:'/docs/library/swift/primer/',title:"A Swift language Primer",section:"Swift",content:"A Swift Language Primer #  This document serves as a basic overview of the most important features and paradigms behind the Swift programming language. It provides some explanation about how each part of the language works and what syntax to use.\nVariables and constants #  Swift differentiates two different types of variables using two different keywords when defining them. A variable or constant can be defined without initialising it, but if it is expected, that the variable will contain no value anytime during runtime, it has to be declared an optional using a special ? syntax. Swift is a strong-typed, type-safe language, which means that each variable or constant has to be given a specific type, which it never can change during runtime. Types can either be inferred by defining the variable with an initial value, or given during definition.\n// Definition of a constant with inferred type of String let const = \u0026#34;This is a constant\u0026#34; // Definition of a variable with inferred type of Int var variable = 100 // Definition of an uninitialized variable with explicit type of Double var inferred: Double // Definition of an optional variable with given type of String var optional: String? Swift doesn’t implement special mutable or immutable collections. They are determined by initialising them as either a variable or constant.\nlet immutableArray = [1, 2, 3, 4] var mutableArray = [1, 2, 3, 4] Operators #  Swift comes with all sorts of operators already build in. A lot of these standard operators can be applied to different kinds of types. This part only covers the basic syntax of each operator. Their special appliances on different types will be covered during the description of the specific type in the next chapter.\nAssignment operator #  This operator is used to assign values to variables, constants or properties.\nvar myString = „This is a string“ Arithmetic operators #  These operators are mostly used to perform arithmetic calculations, but could be applied to non numeric types.\na + b	// Addition a - b	// Subtraction a * b	// Multiplication a / b	// Division Compound assignment operators #  Just like in other languages, Swift supports compound assignments. These take the value of a variable, perform an arithmetic operation on it and reassign the variable with the result. Compound assignments work with all four arithmetic operators.\nvar a = 1 a = a + 1	// Is equivalent to a += 1 Remainder operator #  This operator returns the remainder of a division. It’s better known as the modulo operator.\n10 % 3	// Evaluates to 1 Comparison operators #  These operators perform a logical comparison between two objects and return a boolean value.\na == b	// a equals b a != b	// a unequals b a \u0026lt; b	// a is smaller then b a \u0026lt;= b	// a is smaller or equal to b a \u0026gt; b	// a is greater then b a \u0026gt;= b	// a is greater or equal to b Ternary conditional operator #  This operator evaluates a boolean value or expression and assigns either a value A or a value B to a variable, based on the boolean	value.\nvar numberA = 10 var numberB = 3 var comparison = ((numberA \u0026gt; numberB) ? \u0026#34;A greater then B\u0026#34; : \u0026#34;B greater then A\u0026#34;) Logical operators #  Swift uses logical operators over keywords. These operators can be used to form any logical expression, following the rules of basic Boolean algebra. Unlike Python, boolean operations can only be performed on type boolean values, not on the integers 0 and 1.\nvar t = true var f = !t	// The NOT operator (Expression evalueates to false) var a = t \u0026amp;\u0026amp; f	// The AND operator (Expression evalueates to false) var o = t || f	// The OR operator (Expression evalueates to true) Ranged operators #  Ranged operators provide a way of dealing with ranges between multiple objects as they are typically used in iterations or loops. We will deal with these concepts in a later chapter and only look at the basic syntax of different ranges. Ranges in Swift come in one of two kinds. Either a closed or a half-open range, which determines wether the end point of the range is included or not.\n1...5	// Closed range operator returning the values 1, 2, 3, 4, 5 1..\u0026lt;5	// Half-open range operator returning the values 1, 2, 3, 4 "}),a.add({id:7,href:'/docs/library/python/',title:"Python",section:"Coding Library",content:"  Python\n   Wikipedia says:\nPython is an interpreted, high-level and general-purpose programming language. Python\u0026rsquo;s design philosophy emphasizes code readability with its notable use of significant indentation. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.\nPython is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly, procedural), object-oriented and functional programming. Python is often described as a \u0026ldquo;batteries included\u0026rdquo; language due to its comprehensive standard library.\nGuido van Rossum began working on Python in the late 1980\u0026rsquo;s, as a successor to the ABC programming language, and first released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000 and introduced new features, such as list comprehensions and a garbage collection system using reference counting and was discontinued with version 2.7.18 in 2020. Python 3.0 was released in 2008 and was a major revision of the language that is not completely backward-compatible and much Python 2 code does not run unmodified on Python 3.\nPython consistently ranks as one of the most popular programming languages.\n Important external resources #   Python.org is the homepage to the Python project.\nThe Language Reference contains in depth documentation about every aspect of the language.\n"}),a.add({id:8,href:'/docs/library/markdown/',title:"Markdown",section:"Coding Library",content:"  Markdown\n   Wikipedia says:\nMarkdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files.\n The language is the back bone of this website, since all content is created with it.\n"}),a.add({id:9,href:'/posts/hello_blog/',title:"Hello Blog",section:"Blog",content:"Learning new things is fun! It\u0026rsquo;s energizing and if I really get into something I can\u0026rsquo;t let go of it. I get in over my head. I tend to choose a try-first-look-up-later style of learning. I love to tinker around and if I encounter a problem, I browse the web to find a solution. This often leads to chaos and surely minimizes my learning goals. Now and then I thought about starting a blog to keep track of my ideas and learnings, organize my efforts and saving me from re-learning a lot of things again and agin, because I didn\u0026rsquo;t took my time. I registered at wordpress, blogger and other well known platforms, but was always overwhelmed by the options, templates and payment plans. Since I\u0026rsquo;m also very keen on neat and tidy designs, I could spend hours and hours tweaking a wordpress theme, only to start from scratch later on, only because the theme had one minor detail that bugged me. I tried but failed to run a blog and continued the way it was.\nA few days ago the idea came to my mind again and I hassled around with wordpress again for a while, only to delete the site a few hours later. But I still wanted a slick solution and straight forward workflow, for organizing notes and thoughts. In the following web search, I finally stumbled over the solution to my problem!\n HUGO + GitHub + Command Line = Blog\n An easy to setup, easy to maintain, but jet powerful solution for building a webpage from scratch, without any further knowledge on HTML, CSS or SASS. If you know your way around git, github and the command line, it\u0026rsquo;s very simple to get a site like this one up and running in a day.\nA detailed tutorial on how to set up a new page like this can be found here\nSince a new blog post is only one line of text in the command line away at any time, it should be easy to maintain this blog in the future an let it be the resource I imagine it to be. Let\u0026rsquo;s see how it goes \u0026hellip;\n"}),a.add({id:10,href:'/docs/library/hidden/',title:"Hidden",section:"Coding Library",content:"This page is hidden in menu #  Quondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "}),a.add({id:11,href:'/about/',title:"About",section:"Introduction",content:"About this page and the monkey #  I\u0026rsquo;m just a guy trying to learn some things about coding and computer science. But with a field as wide and complex as this \u0026hellip; I often feel like a coding monkey \u0026hellip;\n   \u0026hellip; since I\u0026rsquo;m also a passionate rock climber the title of this site makes even more sense. My name is Gregor Minnemann and I\u0026rsquo;m a Computer Science student at Fernuniversität Hagen. I started this site to have a place, where I can organize my notes, share my work and keep a personal blog. Maybe the knowledge I\u0026rsquo;ll collect on this page is of any use to somebody out there.\nProjects #      Swift Learn the basics of the Swift programming language.\n    Blog Maintain this website and blog.\n    That should be enough for the start \u0026hellip;\n "})})()