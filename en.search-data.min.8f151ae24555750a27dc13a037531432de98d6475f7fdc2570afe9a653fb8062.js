'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/library/',title:"Coding Library",section:"Docs",content:"Language specific resources #  This folder contains everything coding language related. Since I currently use Python and Swift, the resources found on this page will be mainly on these topics. Besides that, there will be some things about shell scripting, markdown and git around here.\n  Swift  Swift is the main programming language for all Apple devices. Although it\u0026rsquo;s also supported on Linux and Windows. It\u0026rsquo;s the predecessor to Objective-C and a highly modern language, with easy to read syntax.\n    Python  This is where it all started for me. Python was my first contact with coding. But since Python is quite restricted or difficult to deal with, when it comes to UI applications, I started to look somewhere else. But Python is still a tool in my belt and I plan to extend my knowledge on the language.\n    Markdown  Markdown is a simple and easy to use markdown language. It\u0026rsquo;s the main tool for content creation on this website. The articles found here cover everything you need to build content for a page like this one.\n   "}),a.add({id:1,href:'/docs/tutorials/setup_website/',title:"Host a GitHub Page with Hugo",section:"Tutorials",content:"Host a GitHub Page with Hugo #  This is a brief tutorial on how to set up a GitHub page with Hugo as a static content generator. It\u0026rsquo;s a simple and easy solution to maintain a personal website and blog. Especially if your a coder and used to working with git and the command line.\nPrerequisites\nThe following topics are mandatory and won\u0026rsquo;t be covered in this tutorial:\n A working installation of Hugo Basic git knowledge A GitHub account Markdown syntax   1 Hugo #  Hugo is one of the key components for this project. Hugo is a open-source static site generator. Once installed it can be used inside the command line to build static websites from markdown files. The tool comes with a powerful theme engine and is customizable using templates. Hugo builds the mandatory file system during project creation and is later configured using a config.toml file. Hugo lets you create your content as pure markdown files, extend them with a file header and publish them directly to your website, only from the command line. In combination with the right theme this is all you need, if you know your way around git and the terminal, to run your website. I find it a lot easier to deal with, then with wordpress and co.\nHugo has a lot more to offer, than this tutorial covers. For further reading, check the projects homepage.\n2 Project creation #  Before we can start configuring, styling and filling our page with content, we need to build a new Hugo project and set up the connection with github pages.\n2.1 Github setup #  A project like this consists of two github repositories. One so called production repo, which contains the static files, github pages will then host our site of, and one repository, I will call the working repo from now on, cause mine is named this way. If you\u0026rsquo;re building a portfolio or some other kind of page feel free to use another name. The second repository will contain the actual code and configuration for the site. The working repo will later be linked by a submodule to the production repo, to push changes to the site directly to the live version. Go ahead an create two public repositories with no initial content:\n create working repo and name it as you like create production repo and name it \u0026lt;username\u0026gt;.github.io  Since we are using a personal github page for our project, the name of the production repo has to be \u0026lt;github_username\u0026gt;.github.io. Each account is limited to a single personal page, but each repo to a project can have its own site (the setup process is a little bit different though).\nNext we have to clone the remote repository to our local drive. Since the root folder of the repo contains everything we will need, we can directly put it into our home directory like I did, since I will have to access it a lot in the future. My repo is called website so I\u0026rsquo;ll go along with this name for the purpose of this tutorial.\nClone repository to local drive and cd into it:\n1~ $ git clone https://github.com/\u0026lt;username\u0026gt;/website.git 2~ $ cd website After cloning we will checkout main branch, add README.md and .gitignore and push the changes to origin:\n1# Create main branch an switch to it 2~/website $ git checkout -b main 3# Create files - Edit them now if you like 4~/website $ touch README.md 5~/website $ touch .gitignore 6# Stage and commit changes 7~/website $ git add . 8~/website $ git commit -m \u0026#39;initial commit\u0026#39; 9# Push changes to origin/main 10~/website $ git push origin main We now have established a local version of our project folder and can continue with building the Hugo project and files.\n2.2 Create Hugo project #  Let\u0026rsquo;s start by running hugo new site in our root folder:\n1# Hugo command to build a new project 2hugo new site \u0026lt;website-name\u0026gt; // named code-monkey for this tutorial The hugo new site command did all the heavy lifting for us, by creating a lot of boiler plate code, and the mandatory file structure, in order for hugo to work properly. The project structure should look something like this right now:\n. └── /website (git repository) ├── /code-monkey | ├── /content | └── lots of other Hugo files ... └── .git_files  2.3 Establish repository connection #  When we\u0026rsquo;re ready to build a version of our site into static HTML data, Hugo will put the resulting files into a folder called public inside our root directory. If we now add a submodule to our production repo inside this public folder, we will automatically update the live version of our site, when we commit changes to the submodule.\nTo add the submodule to the public folder, go to the command line and type the following:\n1# Create submodule from main branch of repo and clone it to the public folder 2~/website $ git submodule add -b main \u0026lt;username\u0026gt;.github.io public We now have a working connection between the two repositories, which enables us to update the site from our working repo.\n3 Configure Hugo #  The next step is to configure the pre build Hugo project, to make it our own. The first step of this process would be to choose a theme.\n3.1 Choosing a theme #  Choosing a theme is a key part of the creation process. I wanted to build a wiki style page, where I could easily manage content on different topics, present it in a clean and structured way, as well as beeing able to search the site for specific content. A blog to accompany the more in depth articles was also mandatory. The Hugo Themes page is a wonderful resource on all available themes. I went with Hugo - Books, cause it fits everything I need and I also liked the design a lot.\nTo install a Hugo theme, navigate to the themes github repo and copy its link to clone it into your project. This approach works for most themes. Otherwise the themes documentation will point out how to install it. It seems to be best practice to submodule the theme rather than simply cloning it. Some themes may have different installing instructions specified in their documentation.\n1~ /website cd code-monkey 2~ //code-monkey $ git submodule add https://github.com/alex-shpak/hugo-book.git themes/book This creates a submodule of the desired theme inside our blog repo. If the theme is later updated, we can simply pull changes from the original repository of the theme.\n3.2 Configuration #  The configuration of Hugo heavily depends on the theme used. In this article I will cover the configuration of the Books theme. Please see the documentation of your chosen theme for further instructions.\n3.2.1 Basic configuration #  Hugo is configured using a config file in the root directory. It is possible to divide the configuration over multiple files, by using a config folder, but this will not be covered in this tutorial. For a more comprehensive guide check the official documentation.\nThe config file can be in either .toml, .yaml or .json. The example below shows the syntax of the first two options.\n.yaml Hugo config.yaml syntax:\n1baseURL:base URL of live version2title:Website Name3author:Website Author4keywords:[\u0026#34;keyA\u0026#34;,\u0026#34;keyB\u0026#34;,\u0026#34;etc.\u0026#34;]5theme:theme-name67params:8paramName:value.toml Hugo config.toml syntax:\n1baseURL = base URL of live version 2title = Website Name 3author = Website Author 4keywords = [\u0026#34;keyA\u0026#34;, \u0026#34;keyB\u0026#34;, \u0026#34;etc.\u0026#34;] 5theme = theme-name 6 7[params] 8 paramName: value  Some Hugo themes have extensive configuration options. Book on the other hand is luckily quite simple. The following example shows the complete configuration of this website and is annotated with comments for further details:\nBook Theme Config 1baseURL:https://abl3t0nnile.github.io/2title:a Coding Monkey3author:Gregor Minnemann4keywords:[\u0026#34;personal\u0026#34;,\u0026#34;coding\u0026#34;,\u0026#34;computer science\u0026#34;,\u0026#34;swift\u0026#34;,\u0026#34;python\u0026#34;,\u0026#34;markdown\u0026#34;,\u0026#34;blog\u0026#34;,\u0026#34;abl3t0nnile\u0026#34;]5theme:book67# Book configuration8disablePathToLower:true9enableGitInfo:true1011# Needed for mermaid/katex shortcodes12markup:13goldmark:14renderer:15unsafe:true16tableOfContents:17startLevel:118highlight:19anchorLineNos:false20codeFences:true21guessSyntax:false22hl_Lines:\u0026#34;\u0026#34;23lineAnchors:\u0026#34;\u0026#34;24lineNoStart:125lineNos:true26lineNumbersInTable:false27noClasses:true28style:native29tabWidth:43031# Multi-lingual mode config32# There are different options to translate files33# See https://gohugo.io/content-management/multilingual/#translation-by-filename34# And https://gohugo.io/content-management/multilingual/#translation-by-content-directory3536#defaultContentLanguage: en3738languages:39en:40languageName:English41contentDir:content42weight:143de:44languageName:German45contentDir:content.de46weight:24748menu:49# before: []50after:51- name:\u0026#34;Contact\u0026#34;52url:\u0026#34;mailto:minnemann.g@gmail.com\u0026#34;53weight:1054- name:\u0026#34;Github\u0026#34;55url:\u0026#34;https://github.com/Abl3t0nnile\u0026#34;56weight:205758params:59# (Optional, default light) Sets color theme: light, dark or auto.60# Theme \u0026#39;auto\u0026#39; switches between dark and light modes based on browser/os preferences61BookTheme:\u0026#34;auto\u0026#34;6263# (Optional, default true) Controls table of contents visibility on right side of pages.64# Start and end levels can be controlled with markup.tableOfContents setting.65# You can also specify this parameter per page in front matter.66BookToC:true6768# (Optional, default none) Set the path to a logo for the book. If the logo is69# /static/logo.png then the path would be logo.png70BookLogo:/logo.png7172# (Optional, default none) Set leaf bundle to render as side menu73# When not specified file structure and weights will be used74# BookMenuBundle: /menu7576# (Optional, default docs) Specify root page to render child pages as menu.77# Page is resoled by .GetPage function: https://gohugo.io/functions/getpage/78# For backward compatibility you can set \u0026#39;*\u0026#39; to render all sections to menu. Acts same as \u0026#39;/\u0026#39;79BookSection:docs8081# Set source repository location.82# Used for \u0026#39;Last Modified\u0026#39; and \u0026#39;Edit this page\u0026#39; links.83BookRepo:https://github.com/Abl3t0nnile/website8485# Configure the date format used on the pages86# - In git information87# - In blog posts88BookDateFormat:\u0026#34;January 2, 2006\u0026#34;8990# (Optional, default true) Enables search function with flexsearch,91# Index is built on fly, therefore it might slowdown your website.92# Configuration for indexing can be adjusted in i18n folder per language.93BookSearch:true9495# (Optional, default true) Enables comments template on pages96# By default partals/docs/comments.html includes Disqus template97# See https://gohugo.io/content-management/comments/#configure-disqus98# Can be overwritten by same param in page frontmatter99BookComments:false100101# /!\\ This is an experimental feature, might be removed or changed at any time102# (Optional, experimental, default false) Enables portable links and link checks in markdown pages.103# Portable links meant to work with text editors and let you write markdown without shortcode104# Theme will print warning if page referenced in markdown does not exists.105BookPortableLinks:true106107# /!\\ This is an experimental feature, might be removed or changed at any time108# (Optional, experimental, default false) Enables service worker that caches visited pages and resources for offline use.109BookServiceWorker:true110111# /!\\ This is an experimental feature, might be removed or changed at any time112# (Optional, experimental, default false) Enables a drop-down menu for translations only if a translation is present.113BookTranslatedOnly:false   Now, that our site is configured, we can now take a first look. To test a page in Hugo, simply type hugo server into the command line, while in the project directory. Hugo now creates the website and runs it on a local host. The address will be shown in the command line. As long as you keep the server running, hugo will update the site on every change we make to the code.\nAlthough it\u0026rsquo;s empty our page is now complete. All we have to do, is create some content and push the changes to our production repo.\n 4 Content management #  To be continued \u0026hellip;\n5 Publication #  To be continued \u0026hellip;\n"}),a.add({id:2,href:'/docs/library/markdown/syntax_guide/',title:"Markdown Syntax Guide",section:"Markdown",content:"Markdown Syntax Guide #    This article offers a sample of basic Markdown syntax that can be used in Hugo content files.\nThis article is a shortened adaption of the great Grav original page.\nFor further details on the extended Markdown syntax of Hugo and Books - Theme see the corresponding articles.\n Let\u0026rsquo;s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\n Markdown is simple to learn, with minimal extra characters, so it\u0026rsquo;s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use!  John Gruber, the author of Markdown, puts it like this:\n The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email.\n\u0026ndash; John Gruber\n Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like!\n1 Headings #  Headings from h1 through h6 are constructed with a # for each level:\n1# h1 Heading 2## h2 Heading 3### h3 Heading 4#### h4 Heading 5##### h5 Heading 6###### h6 Heading 2 Comments #  Comments should be HTML compatible.\n1\u0026lt;!-- 2This is a comment 3--\u0026gt; Comment below should NOT be seen:\n3 Horizontal Rules #  The HTML \u0026lt;hr\u0026gt; element is for creating a \u0026ldquo;thematic break\u0026rdquo; between paragraph-level elements. In Markdown, you can create a \u0026lt;hr\u0026gt; with any of the following:\n ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks  The rendered output looks like this:\n   4 Inline HTML #  If you need a certain HTML tag (with a class) you can simply use HTML:\n1Paragraph in Markdown. 2 3\u0026lt;div class=\u0026#34;class\u0026#34;\u0026gt; 4 This is \u0026lt;b\u0026gt;HTML\u0026lt;/b\u0026gt; 5\u0026lt;/div\u0026gt; 6 7Paragraph in Markdown. 5 Emphasis #  Bold #  For emphasizing a snippet of text with a heavier font-weight.\nThe following snippet of text is rendered as bold text.\n1**rendered as bold text** 2__rendered as bold text__ Italics #  For emphasizing a snippet of text with italics.\nThe following snippet of text is rendered as italicized text.\n1*rendered as italicized text* 2_rendered as italicized text_ Strikethrough #  In GitHub flavored Markdown, which can be used on this site, you can do strikethroughs.\n1~~Strike through this text.~~ The rendered output looks like this:\nStrike through this text.\nCombination #  Bold, italics, and strikethrough can be used in combination.\n1***bold and italics*** 2~~**strikethrough and bold**~~ 3~~*strikethrough and italics*~~ 4~~***bold, italics and strikethrough***~~ The rendered output looks like this:\nbold and italics\nstrikethrough and bold\nstrikethrough and italics\nbold, italics and strikethrough\n6 Blockquotes #  For quoting blocks of content from another source within your document.\nAdd \u0026gt; before any text you want to quote:\n1\u0026gt; **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) 2\u0026gt; and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this:\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n Blockquotes can also be nested:\n1\u0026gt; Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. 2Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. 3\u0026gt;\u0026gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor 4odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this:\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n  7 Lists #  Unordered #  A list of items in which the order of the items does not explicitly matter.\nYou may use any of the following symbols to denote bullets for each list item:\n1* valid bullet 2- valid bullet 3+ valid bullet For example:\n1* Lorem ipsum dolor sit amet 2* Consectetur adipiscing elit 3* Integer molestie lorem at massa 4* Facilisis in pretium nisl aliquet 5* Nulla volutpat aliquam velit 6 * Phasellus iaculis neque 7 * Purus sodales ultricies 8 * Vestibulum laoreet porttitor sem 9 * Ac tristique libero volutpat at 10* Faucibus porta lacus fringilla vel 11* Aenean sit amet erat nunc 12* Eget porttitor lorem The rendered output looks like this:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit  Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at   Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  Ordered #  A list of items in which the order of items does explicitly matter.\n11. Lorem ipsum dolor sit amet 22. Consectetur adipiscing elit 33. Integer molestie lorem at massa 44. Facilisis in pretium nisl aliquet 55. Nulla volutpat aliquam velit 66. Faucibus porta lacus fringilla vel 77. Aenean sit amet erat nunc 88. Eget porttitor lorem The rendered output looks like this:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  If you just use 1. for each number, Markdown will automatically number each item. For example:\n11. Lorem ipsum dolor sit amet 21. Consectetur adipiscing elit 31. Integer molestie lorem at massa 41. Facilisis in pretium nisl aliquet 51. Nulla volutpat aliquam velit 61. Faucibus porta lacus fringilla vel 71. Aenean sit amet erat nunc 81. Eget porttitor lorem The rendered output looks like this:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem   Task Lists #  Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]).\n1- [x] Write the press release 2- [ ] Update the website 3- [ ] Contact the media The rendered output looks like this:\n Write the press release Update the website Contact the media  8 Code #  Inline Code #  Wrap inline snippets of code with `.\n1In this example, `\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;` should be wrapped as **code**. The rendered output looks like this:\nIn this example, \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; should be wrapped as code.\nIndented Code #  Or indent several lines of code by at least four spaces, as in:\n1 // Some comments 2 line 1 of code 3 line 2 of code 4 line 3 of code The rendered output looks like this:\n// Some comments line 1 of code line 2 of code line 3 of code  Block Fenced Code #  Use \u0026ldquo;fences\u0026rdquo; ``` to block in multiple lines of code with a language attribute.\n1```markdown 2Sample text here... 3``` Syntax Highlighting #  GitHub Flavored Markdown also supports syntax highlighting.\nTo activate it, simply add the file extension of the language you want to use directly after the first code \u0026ldquo;fence\u0026rdquo;, ```js, and syntax highlighting will automatically be applied in the rendered HTML.\nFor example, to apply syntax highlighting to JavaScript code:\n1```js 2grunt.initConfig({ 3 assemble: { 4 options: { 5 assets: \u0026#39;docs/assets\u0026#39;, 6 data: \u0026#39;src/data/*.{json,yml}\u0026#39;, 7 helpers: \u0026#39;src/custom-helpers.js\u0026#39;, 8 partials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;] 9 }, 10 pages: { 11 options: { 12 layout: \u0026#39;default.hbs\u0026#39; 13 }, 14 files: { 15 \u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;] 16 } 17 } 18 } 19}; 20``` The rendered output looks like this:\n1grunt.initConfig({ 2 assemble: { 3 options: { 4 assets: \u0026#39;docs/assets\u0026#39;, 5 data: \u0026#39;src/data/*.{json,yml}\u0026#39;, 6 helpers: \u0026#39;src/custom-helpers.js\u0026#39;, 7 partials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;] 8 }, 9 pages: { 10 options: { 11 layout: \u0026#39;default.hbs\u0026#39; 12 }, 13 files: { 14 \u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;] 15 } 16 } 17 } 18}; Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode.  9 Tables #  Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n1| Option | Description | 2| ------ | ----------- | 3| data | path to data files to supply the data that will be passed into templates. | 4| engine | engine to be used for processing templates. Handlebars is the default. | 5| ext | extension to be used for dest files. | The rendered output looks like this:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    \u0026#39;\u0026#39; Adding a colon on the right side of the dashes below any heading will right align text for that column.\nAdding colons on both sides of the dashes below any heading will center align text for that column.\n1| Option | Description | 2|:------:| -----------:| 3| data | path to data files to supply the data that will be passed into templates. | 4| engine | engine to be used for processing templates. Handlebars is the default. | 5| ext | extension to be used for dest files. | The rendered output looks like this:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.      10 Links #  Basic Link #  1\u0026lt;https://assemble.io\u0026gt; 2\u0026lt;contact@revolunet.com\u0026gt; 3[Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip):\nhttps://assemble.io\ncontact@revolunet.com\n Assemble\nAdd a Title #  1[Upstage](https://github.com/upstage/ \u0026#34;Visit Upstage!\u0026#34;) The rendered output looks like this (hover over the link, there should be a tooltip):\n Upstage\nNamed Anchors #  Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n1## Table of Contents 2 * [Chapter 1](#chapter-1) 3 * [Chapter 2](#chapter-2) 4 * [Chapter 3](#chapter-3) will jump to these sections:\n1## Chapter 1 \u0026lt;a id=\u0026#34;chapter-1\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 2Content for chapter one. 3 4## Chapter 2 \u0026lt;a id=\u0026#34;chapter-2\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 5Content for chapter one. 6 7## Chapter 3 \u0026lt;a id=\u0026#34;chapter-3\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 8Content for chapter one. The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.  11 Footnotes #  Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page.\nTo create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially.\nAdd the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables.\n1This is a digital footnote[^1]. 2This is a footnote with \u0026#34;label\u0026#34;[^label] 3 4[^1]: This is a digital footnote 5[^label]: This is a footnote with \u0026#34;label\u0026#34; This is a digital footnote1.\nThis is a footnote with \u0026ldquo;label\u0026rdquo;2\n12 Images #  Images have a similar syntax to links but include a preceding exclamation point.\n1![Banana](/img/banana.png)  or:\n1![Alt text](/img/monkey.png \u0026#34;The coding Monkey\u0026#34;)    This is a digital footnote \u0026#x21a9;\u0026#xfe0e;\n This is a footnote with \u0026ldquo;label\u0026rdquo; \u0026#x21a9;\u0026#xfe0e;\n   "}),a.add({id:3,href:'/docs/tutorials/shell_auto_blog/',title:"Automate GitHub Hosting with Shell Scripts",section:"Tutorials",content:"Introduction #  This article will show how to simplify a lot of typing in the command line, when maintaining a GitHub page. It explores basic shell scripting, to automate post creation, staging and commit repository changes and pushing the updated site to the production repo of the project.\n"}),a.add({id:4,href:'/docs/library/markdown/hugo_shortcodes/',title:"Hugo Markdown Shortcodes",section:"Markdown",content:"Hugo Shortcodes #  This is a quick roundup on hugo shortcodes. These are snippets you can drop into your markdown, to further style a page. This article only covers the ones I find usefull. For additional instructions read the official Documentation.\n1 Figure #  figure is an extension of the basic Markdown figure implementation. It provides a lot more options then the basic Markdown one.\nThe following syntax is used to place a figure inside a document:\n1{{\u0026lt; figure src=\u0026#34;/images/computer.png\u0026#34; title=\u0026#34;Retro Machine\u0026#34; \u0026gt;}} The root folder of the src parameter points to the /static folder inside the projects root folder, but it\u0026rsquo;s possible to define a specific path, using a standard relative path notation ../../folder/folder/file.jpeg.\nThe rendered output looks like this:\n  Retro Machine   The figure shortcode provides a variety of additional parameter, which can be set in the opening tag. These are:\n src - URL of the image to be displayed. link - If the image needs to be hyperlinked, URL of the destination. target - Optional target attribute for the URL if link parameter is set. rel - Optional rel attribute for the URL if link parameter is set. alt - Alternate text for the image if the image cannot be displayed. title - Image title. caption - Image caption. Markdown within the value of caption will be rendered. class - class attribute of the HTML figure tag. height - height attribute of the image. width - width attribute of the image. attr - Image attribution text. Markdown within the value of attr will be rendered. attrlink - If the attribution text needs to be hyperlinked, URL of the destination.   Styled images #  A figure can be styled using the height and width parameters in combination with in line HTML. Let\u0026rsquo;s shrink the image above, center it on the screen and provide it with a better caption.\n1\u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt; 2{{\u0026lt; figure src=\u0026#34;/images/computer.png\u0026#34; caption=\u0026#34;### Retro Machine\u0026#34; width=\u0026#34;250 px\u0026#34;\u0026gt;}} 3\u0026lt; /div \u0026gt; The rendered output looks like this:\n  Retro Machine    This looks much nicer now! Note how standard Markdown syntax worked on the styling of the caption inside the figure tag.\n2 Highlight #  Similar to the figure shortcode, the standard Markdown capabilities on syntax highlighting are extended with Hugo\u0026rsquo;s own highlight shortcode. This shortcode takes exactly one required parameter for the programming language to highlight. The following is an example of the basic syntax:\n1{{\u0026lt; highlight language \u0026gt;}} 2// ... code 3{{\u0026lt; / highlight \u0026gt;}} The output renders as follows:\n1def foo() -\u0026gt; string: 2 return \u0026#39;bar\u0026#39; The highlight shortcode also has additional parameters, to further style it. These are given as a string of key, value pairs. The following options are available:\n linenos - configure line numbers. Valid values are true, false, table, or inline. false will turn off line numbers if it’s configured to be on in site config. New in v0.60.0 table will give copy-and-paste friendly code blocks. hl_lines - lists a set of line numbers or line number ranges to be highlighted. linenostart=int - starts the line number count from the given number. anchorlinenos - Configure anchors on line numbers. Valid values are true or false; lineanchors - Configure a prefix for the anchors on line numbers. Will be suffixed with -, so linking to the line number 1 with the option lineanchors=prefix - adds the anchor prefix-1 to the page.   Details about highlight configuration inside config.toml can be found here.\n3 Ref and Relref #  Since I came across no restrictions on internal and external linking, with the standard Markdown syntax, I see no use for this shortcode.\n4 Youtube #  Hugo supports direct embedding of a Youtube player on the page, with its own shortcode. All it needs is the videos ID. Taken the following URL https://www.youtube.com/watch?v=w7Ft2ymGmfc for instance, the syntax would look like this:\n1{{\u0026lt; youtube w7Ft2ymGmfc \u0026gt;}} and the corresponding output as follows:\n  "}),a.add({id:5,href:'/docs/tutorials/',title:"Tutorials",section:"Docs",content:"Tutorials and Guides #  Some things have to be done a specific way. This part of the page is home to all step-by-step guides and tutorials. It\u0026rsquo;s easier to write it down first time, then looking it up again later.\n  Essentials #    Setup a site like the one you see\n "}),a.add({id:6,href:'/docs/library/markdown/books_shortcodes/',title:"Books - Theme Shortcodes",section:"Markdown",content:"Books - Theme Shortcodes #  This article gives a brief overview about special shortcodes, implemented by the Books - Theme for Hugo. The examples in this article are taken from the projects website. Since I don\u0026rsquo;t need all of the available options, I will only list those, being used on this page.\n1 Columns #  Columns are the perfect tool for additional page styling. They provide a handy method to combine pictures and text. A good example for this is the homepage of this project. The syntax for this shortcode looks like this:\n1{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; 2// Content goes here ... 3\u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; 4// Content goes here ... 5\u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; 6// Content goes here ... 7{{\u0026lt; /columns \u0026gt;}} Left Block Here is some text inside the left column.  Middle Block    Right Block Here is some text inside the right column.   There is no specific limitation to the number of columns used. Like shown in the next example,columns can even be used to realize something like a grid layout.\n                         2 Details #  The details shortcode is used to highlight content. It provides a caption to the block and makes the content expandable. The behavior can configured with arguments. The basic syntax is the following:\n1{{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} 2// Content goes here ... 3{{\u0026lt; /details \u0026gt;}} This a rendered example:\nExpanded detail box This is something I want to highlight!   A closed one looks like this:\nFolded detail box This is something not so important you can look up.   3 Hints #  Hints are a good way to highlight content as either a coloroed warning, danger or info box. The basic syntax is:\n1{{\u0026lt; hint type \u0026gt;}} 2// Content goes here ... 3{{\u0026lt; /hint \u0026gt;}} The rendered options look like this:\nThis is an Info\nThis is some thing I want to point out.  This is a Warning!\nBe aware of the following \u0026hellip; Spoilers ahead!  Danger!!!\nDon\u0026rsquo;t do the following, or the application will crash!  4 Tabs #  Sometimes content has to be ordered into different categories. A good example is different use cases in terms of operating systems. Create a tab box with the following syntax:\n1{{\u0026lt; tabs uniqueid \u0026gt;}} 2 3{{\u0026lt; tab name \u0026gt;}} 4// Tab Content ... 5{{\u0026lt; /tab \u0026gt;}} 6 7{{\u0026lt; /tabs \u0026gt;}} A rendered example looks like this:\nMacOS MacOS Content Linux Linux Content Windows Windows Content  "}),a.add({id:7,href:'/docs/library/swift/',title:"Swift",section:"Coding Library",content:"  Swift\n   Wikipedia says:\nSwift is a general-purpose, multi-paradigm, compiled programming language developed by Apple Inc. and the open-source community, first released in 2014. Swift was developed as a replacement for Apple\u0026rsquo;s earlier programming language Objective-C, as Objective-C had been largely unchanged since the early 1980s and lacked modern language features. Swift works with Apple\u0026rsquo;s Cocoa and Cocoa Touch frameworks, and a key aspect of Swift\u0026rsquo;s design was the ability to interoperate with the huge body of existing Objective-C code developed for Apple products over the previous decades. It is built with the open source LLVM compiler framework and has been included in Xcode since version 6, released in 2014. On Apple platforms, it uses the Objective-C runtime library which allows C, Objective-C, C++ and Swift code to run within one program.\nSwift was introduced at Apple\u0026rsquo;s 2014 Worldwide Developers Conference (WWDC). It underwent an upgrade to version 1.2 during 2014 and a major upgrade to Swift 2 at WWDC 2015. Initially a proprietary language, version 2.2 was made open-source software under the Apache License 2.0 on December 3, 2015, for Apple\u0026rsquo;s platforms and Linux.\nSwift 5.1 was officially released in September 2019. Swift 5.1 builds on the previous version of Swift 5 by extending the stable features of the language to compile-time with the introduction of module stability. The introduction of module stability makes it possible to create and share binary frameworks that will work with future releases of Swift.\n Important external resources #   Swift.org is home to the Swift community. It contains tutorials, guides and the complete documentation to the Swift language.\nThe Apple Developer Programm is another pretty useful page for aspiring Swift developers. It has even more tutorials and guides an app development for the Apple cosmos.\n"}),a.add({id:8,href:'/docs/library/swift/primer/',title:"A Swift language Primer",section:"Swift",content:"A Swift Language Primer #  This document serves as a basic overview of the most important features and paradigms behind the Swift programming language. It provides some explanation about how each part of the language works and what syntax to use.\nVariables and constants #  Swift differentiates two different types of variables using two different keywords when defining them. A variable or constant can be defined without initialising it, but if it is expected, that the variable will contain no value anytime during runtime, it has to be declared an optional using a special ? syntax. Swift is a strong-typed, type-safe language, which means that each variable or constant has to be given a specific type, which it never can change during runtime. Types can either be inferred by defining the variable with an initial value, or given during definition.\n1// Definition of a constant with inferred type of String 2let const = \u0026#34;This is a constant\u0026#34; 3// Definition of a variable with inferred type of Int 4var variable = 100 5// Definition of an uninitialized variable with explicit type of Double 6var inferred: Double 7// Definition of an optional variable with given type of String 8var optional: String? Swift doesn’t implement special mutable or immutable collections. They are determined by initialising them as either a variable or constant.\n1let immutableArray = [1, 2, 3, 4] 2var mutableArray = [1, 2, 3, 4] Operators #  Swift comes with all sorts of operators already build in. A lot of these standard operators can be applied to different kinds of types. This part only covers the basic syntax of each operator. Their special appliances on different types will be covered during the description of the specific type in the next chapter.\nAssignment operator #  This operator is used to assign values to variables, constants or properties.\n1var myString = \u0026#34;This is a string\u0026#34; Arithmetic operators #  These operators are mostly used to perform arithmetic calculations, but could be applied to non numeric types.\n1a + b	// Addition 2a - b	// Subtraction 3a * b	// Multiplication 4a / b	// Division Compound assignment operators #  Just like in other languages, Swift supports compound assignments. These take the value of a variable, perform an arithmetic operation on it and reassign the variable with the result. Compound assignments work with all four arithmetic operators.\n1var a = 1 2a = a + 1	// Is equivalent to 3a += 1 Remainder operator #  This operator returns the remainder of a division. It’s better known as the modulo operator.\n110 % 3	// Evaluates to 1 Comparison operators #  These operators perform a logical comparison between two objects and return a boolean value.\n1a == b	// a equals b 2a != b	// a unequals b 3a \u0026lt; b	// a is smaller then b 4a \u0026lt;= b	// a is smaller or equal to b 5a \u0026gt; b	// a is greater then b 6a \u0026gt;= b	// a is greater or equal to b Ternary conditional operator #  This operator evaluates a boolean value or expression and assigns either a value A or a value B to a variable, based on the boolean	value.\n1var numberA = 10 2var numberB = 3 3var comparison = ((numberA \u0026gt; numberB) ? \u0026#34;A greater then B\u0026#34; : \u0026#34;B greater then A\u0026#34;) Logical operators #  Swift uses logical operators over keywords. These operators can be used to form any logical expression, following the rules of basic Boolean algebra. Unlike Python, boolean operations can only be performed on type boolean values, not on the integers 0 and 1.\n1var t = true 2var f = !t	// The NOT operator (Expression evalueates to false) 3var a = t \u0026amp;\u0026amp; f	// The AND operator (Expression evalueates to false) 4var o = t || f	// The OR operator (Expression evalueates to true) Ranged operators #  Ranged operators provide a way of dealing with ranges between multiple objects as they are typically used in iterations or loops. We will deal with these concepts in a later chapter and only look at the basic syntax of different ranges. Ranges in Swift come in one of two kinds. Either a closed or a half-open range, which determines wether the end point of the range is included or not.\n11...5	// Closed range operator returning the values 1, 2, 3, 4, 5 21..\u0026lt;5	// Half-open range operator returning the values 1, 2, 3, 4 "}),a.add({id:9,href:'/docs/library/python/',title:"Python",section:"Coding Library",content:"  Python\n   Wikipedia says:\nPython is an interpreted, high-level and general-purpose programming language. Python\u0026rsquo;s design philosophy emphasizes code readability with its notable use of significant indentation. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.\nPython is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly, procedural), object-oriented and functional programming. Python is often described as a \u0026ldquo;batteries included\u0026rdquo; language due to its comprehensive standard library.\nGuido van Rossum began working on Python in the late 1980\u0026rsquo;s, as a successor to the ABC programming language, and first released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000 and introduced new features, such as list comprehensions and a garbage collection system using reference counting and was discontinued with version 2.7.18 in 2020. Python 3.0 was released in 2008 and was a major revision of the language that is not completely backward-compatible and much Python 2 code does not run unmodified on Python 3.\nPython consistently ranks as one of the most popular programming languages.\n Important external resources #   Python.org is the homepage to the Python project.\nThe Language Reference contains in depth documentation about every aspect of the language.\n"}),a.add({id:10,href:'/docs/library/markdown/',title:"Markdown",section:"Coding Library",content:"  Markdown\n  Markdown is the back bone of this website, since all content is created with it.\n Wikipedia says:\nMarkdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files.\n Table of Contents #    Markdown Syntax - A comprehnsive guide to markdown syntax  Hugo Shortcodes - Hugo code spnippets  Books - Theme Shortcodes - Book theme specific code snippets  "}),a.add({id:11,href:'/posts/hello_blog/',title:"Hello Blog",section:"Blog",content:"Learning new things is fun! It\u0026rsquo;s energizing and if I really get into something I can\u0026rsquo;t let go of it. I get in over my head. I tend to choose a try-first-look-up-later style of learning. I love to tinker around and if I encounter a problem, I browse the web to find a solution. This often leads to chaos and surely minimizes my learning goals. Now and then I thought about starting a blog to keep track of my ideas and learnings, organize my efforts and saving me from re-learning a lot of things again and agin, because I didn\u0026rsquo;t took my time. I registered at wordpress, blogger and other well known platforms, but was always overwhelmed by the options, templates and payment plans. Since I\u0026rsquo;m also very keen on neat and tidy designs, I could spend hours and hours tweaking a wordpress theme, only to start from scratch later on, only because the theme had one minor detail that bugged me. I tried but failed to run a blog and continued the way it was.\nA few days ago the idea came to my mind again and I hassled around with wordpress again for a while, only to delete the site a few hours later. But I still wanted a slick solution and straight forward workflow, for organizing notes and thoughts. In the following web search, I finally stumbled over the solution to my problem!\n HUGO + GitHub + Command Line = Blog\n An easy to setup, easy to maintain, but jet powerful solution for building a webpage from scratch, without any further knowledge on HTML, CSS or SASS. If you know your way around git, github and the command line, it\u0026rsquo;s very simple to get a site like this one up and running in a day.\nA detailed tutorial on how to set up a new page like this can be found here\nSince a new blog post is only one line of text in the command line away at any time, it should be easy to maintain this blog in the future an let it be the resource I imagine it to be. Let\u0026rsquo;s see how it goes \u0026hellip;\n"}),a.add({id:12,href:'/about/',title:"About",section:"Introduction",content:"About this page and the monkey #  I\u0026rsquo;m just a guy trying to learn some things about coding and computer science. But with a field as wide and complex as this \u0026hellip; I often feel like a coding monkey \u0026hellip;\n   \u0026hellip; since I\u0026rsquo;m also a passionate rock climber the title of this site makes even more sense. My name is Gregor Minnemann and I\u0026rsquo;m a Computer Science student at Fernuniversität Hagen. I started this site to have a place, where I can organize my notes, share my work and keep a personal blog. Maybe the knowledge I\u0026rsquo;ll collect on this page is of any use to somebody out there.\nProjects #      Swift Learn the basics of the Swift programming language.\n    Blog Maintain this website and blog.\n    That should be enough for the start \u0026hellip;\n "})})()